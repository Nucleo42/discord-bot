name: Deploy Code

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      ACTIONS_RUNTIME_TOKEN: "fake-token"
      ACTIONS_RUNTIME_URL: "fake-url"
      ACTIONS_CACHE_URL: "fake-cache-url"
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.18.0

      - name: Install Yarn
        run: |
          corepack enable
          corepack prepare yarn@stable --activate

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libcairo2-dev libpango1.0-dev libjpeg-dev libgif-dev librsvg2-dev
          yarn install --frozen-lockfile
          # Instalar TypeScript e outras ferramentas globalmente no container
          yarn global add typescript@latest ts-node tsc-alias copyfiles

      - name: Build and Package
        run: |
          # Usar yarn para executar os scripts garante que use as dependÃªncias locais
          yarn build

          # Create .env file
          echo "DISCORD_TOKEN=$DISCORD_TOKEN" > .env
          echo "NODE_ENV=production" >> .env
          echo "DATABASE_URL=$DATABASE_URL" >> .env

          # Create zip without using artifacts
          zip -r deploy.zip \
          discloud.config \
          dist \
          drizzle.config.js \
          .env \
          package.json \
          static \
          yarn.lock
        env:
          DISCORD_TOKEN: ${{ secrets.DISCORD_TOKEN }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Deploy
        run: |
          curl -X POST \
          -H "Authorization: Bearer $API_KEY" \
          -F "file=@deploy.zip" \
          "$API_URL"
        env:
          API_URL: ${{ secrets.API_URL }}
          API_KEY: ${{ secrets.API_KEY }}
