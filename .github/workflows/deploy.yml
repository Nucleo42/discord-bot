name: Deploy Code

on:
  push:
    branches:
      - main
    paths:
      - "src/**"
  workflow_dispatch:

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.18.0

      - name: Install Yarn
        run: |
          corepack enable
          corepack prepare yarn@stable --activate

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            .yarn/cache
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

  install-dependencies:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.18.0

      - name: Install native dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libcairo2-dev libpango1.0-dev libjpeg-dev libgif-dev librsvg2-dev

      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            .yarn/cache
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}

      - name: Install dependencies
        run: yarn install --immutable

  build:
    needs: install-dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.18.0

      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            .yarn/cache
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}

      - name: Create .env file
        env:
          DISCORD_TOKEN: ${{ secrets.DISCORD_TOKEN }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          GEMINI_URL: ${{ secrets.GEMINI_URL }}
          GEMINI_URL_API_KEY: ${{ secrets.GEMINI_URL_API_KEY }}
        run: |
          echo -e "DISCORD_TOKEN=$DISCORD_TOKEN\nNODE_ENV=production\nDATABASE_URL=$DATABASE_URL\nGEMINI_URL=$GEMINI_URL\nGEMINI_URL_API_KEY=$GEMINI_URL_API_KEY" > .env

      - name: Build TypeScript
        run: yarn build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: dist/

  prepare-deployment:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-output
          path: dist/

      - name: Create .env file
        env:
          DISCORD_TOKEN: ${{ secrets.DISCORD_TOKEN }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          echo -e "DISCORD_TOKEN=$DISCORD_TOKEN\nNODE_ENV=production\nDATABASE_URL=$DATABASE_URL" > .env

      - name: Create deployment package
        run: |
          zip -r deploy.zip \
          discloud.config \
          dist \
          drizzle.config.js \
          .env \
          package.json \
          static \
          yarn.lock

      - name: Upload deployment package
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package
          path: deploy.zip

  deploy:
    needs: prepare-deployment
    runs-on: ubuntu-latest
    steps:
      - name: Download deployment package
        uses: actions/download-artifact@v4
        with:
          name: deployment-package

      - name: Deploy to API
        env:
          API_URL: ${{ secrets.API_URL }}
          API_KEY: ${{ secrets.API_KEY }}
        run: |

          if [ -z "$API_KEY" ]; then
            echo "API_KEY is not set. Deployment cannot proceed."
            exit 1
          fi

          if [ -z "$API_URL" ]; then
            echo "API_URL is not set. Deployment cannot proceed."
            exit 1
          fi

          curl -s -w "%{http_code}" -o /dev/null -X PUT \
            -H "api-token: $API_KEY" \
            -F "file=@deploy.zip" \
            "$API_URL" | grep -q "^200$" || { echo "Deploy failed"; exit 1; }
